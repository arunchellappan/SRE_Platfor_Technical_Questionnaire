import requests
from datetime import datetime
import time
from urllib.request import Request, urlopen

class CircuitBreaker:
    def __init__(self, http_client,error_threshold, time_window):
        self.http_client = http_client
        self.error_threshold = error_threshold
        self.time_window = time_window

        self.state = "CLOSED"
        self.error_attempt_count = 0
        self.last_attempt_timestamp = 0

    def do_request(self, url):
        if self.state == "CLOSED":
            return self.handle_closed_state(url)
        if self.state == "OPEN":
            return self.handle_open_state(url)
    
    def update_last_attempt_timestamp(self):
        self.last_attempt_timestamp = datetime.utcnow().timestamp()

    def handle_closed_state(self, url):
        try:
            print("Calling URL: "+url + " Circuit state: "+self.state)
            res = self.http_client(url)
            print("Success: Remote call")
            self.update_last_attempt_timestamp()
            return res
        except Exception as e:        
            print("Error: CircuitOpenError")           
            self.error_attempt_count += 1           
            self.update_last_attempt_timestamp()
           
            if self.error_attempt_count >= self.error_threshold:
                self.state = "OPEN"            

    def handle_open_state(self, url):
        current_timestamp = datetime.utcnow().timestamp()
        print(" Circuit state: "+self.state)
        
        if self.last_attempt_timestamp + self.time_window >= current_timestamp:
            print(f"Retry after {self.last_attempt_timestamp+self.time_window-current_timestamp} secs")
            return
       
        self.state = "HALF_OPEN"
        try:
            print("Calling URL: "+url + " Circuit state: "+self.state)
            ret_val = self.http_client(url)           
            self.state = "CLOSED"           
            self.error_attempt_count = 0           
            self.update_last_attempt_timestamp()
           
            return ret_val
        except Exception as e:           
            self.error_attempt_count += 1           
            self.update_last_attempt_timestamp()           
            self.state = "OPEN"

if __name__ == "__main__":
    # TODO: Instantiate and configure stub_client
    success_url = "https://wetransfer.com"
    error_url = "https://Page_not_found.com"
    error_threshold = 3
    time_window = 10

    def stub_client(url=None): #declaring an extra obj if the url is null
        if url == None:
            return 404
        print("URL: " + url)
        req = Request(url=url, headers={'User-Agent': 'Mozilla/5.0'}, data=None)
        resp_status = urlopen(req).getcode()
        return resp_status
     
    breaker = CircuitBreaker (stub_client, error_threshold, time_window)

    # TODO:
    #
    # Loop N number of times to simulate consecutive requests.
    # Demonstrate that the circuit opens after some number of
    # failures.
    #
    # Then, wait a while; you may sleep().
    #
    # Demonstrate that the circuit has closed and that requests
    # to stub client flow freely.
    
    N = 20
    c=2
    for i in range (N):
        time.sleep(2)
        print("Execution Loop Count: "+str(i+1))
        if i < c:
            breaker.do_request(success_url)
        if i >= c  and i  < c + error_threshold +4:
            breaker.do_request(error_url)
    
        if i  >= c + error_threshold + 4:
            breaker.do_request(success_url)
        
        print("Execution Loop End: "+str(i+1))
        print("       ")
